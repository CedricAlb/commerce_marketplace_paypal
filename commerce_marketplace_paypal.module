<?php
/**
 * @file
 * Adapts Commerce Paypal features for Commerce Marketplace.
 */

/**
 * Implements hook_menu_alter().
 *
 * @see commerce_paypal_menu()
 */
function commerce_marketplace_paypal_menu_alter(&$items) {
  if (isset($items['commerce_paypal/ipn'])) {
    $items['commerce_paypal/ipn']['page callback'] = 'commerce_marketplace_paypal_process_ipn';
  }
  if (isset($items['commerce_paypal/ipn/%commerce_payment_method_instance'])) {
    $items['commerce_paypal/ipn/%commerce_payment_method_instance']['page callback'] = 'commerce_marketplace_paypal_process_ipn';
  }
}

/**
 * Processes an incoming IPN.
 *
 * @param $payment_method
 *   The payment method instance array that originally made the payment.
 * @param $debug_ipn
 *   Optionally specify an IPN array for debug purposes; if left empty, the IPN
 *     be pulled from the $_POST. If an IPN is passed in, validation of the IPN
 *     at PayPal will be bypassed.
 *
 * @return
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 *
 * @see commerce_paypal_process_ipn()
 */
function commerce_marketplace_paypal_process_ipn($payment_method = NULL, $debug_ipn = array()) {
  // We do not want to retrieve the IPN data from $_POST, as original
  // commerce_paypal_process_ipn() does it, as it might cause serialization
  // issues with array data in the POST. Instead, we will read raw POST data
  // from the input stream.
  // See https://developer.paypal.com/docs/classic/ipn/ht_ipn/ and
  // http://enjoysmile.com/blog/24/paypal-adaptive-payments-and-ipn-part-two/
  // for more information.
  if (empty($debug_ipn)) {
    $raw_post_data = file_get_contents('php://input');

    // Log the raw IPN if logging is enabled.
    if (!empty($payment_method['settings']['marketplace_adaptive']['api_logging']['response'])) {
      watchdog('commerce_marketplace_paypal', 'Received raw IPN: !ipn', array(
        '!ipn' => '<pre>' . var_export($raw_post_data, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // Convert raw POST string data to an array.
    $ipn = commerce_marketplace_paypal_raw_post_data_to_array($raw_post_data);

    // Log the decoded IPN if logging is enabled.
    if (!empty($payment_method['settings']['marketplace_adaptive']['api_logging']['response'])) {
      watchdog('commerce_marketplace_paypal', 'Received decoded IPN: !ipn', array(
        '!ipn' => '<pre>' . var_export($ipn, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // Exit now if the $_POST was empty.
    if (empty($ipn)) {
      watchdog('commerce_marketplace_paypal', 'IPN URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
      return FALSE;
    }

    // Prepare an array to POST back to PayPal to validate the IPN.
    $validate_ipn = 'cmd=_notify-validate&' . $raw_post_data;

    // Determine the proper PayPal server to POST to.
    if (!empty($ipn['test_ipn']) && $ipn['test_ipn'] == 1) {
      $host = 'https://www.sandbox.paypal.com/cgi-bin/webscr';
    }
    else {
      $host = 'https://www.paypal.com/cgi-bin/webscr';
    }

    // Log the IPN validation request if logging is enabled.
    if (!empty($payment_method['settings']['marketplace_adaptive']['api_logging']['request'])) {
      watchdog('commerce_marketplace_paypal_wps', 'IPN validation request: !request', array(
        '!request' => '<pre>' . var_export($validate_ipn, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // Process the HTTP request to validate the IPN.
    $response = drupal_http_request($host, array('method' => 'POST', 'data' => $validate_ipn));

    // Log the IPN validation response if logging is enabled.
    if (!empty($payment_method['settings']['marketplace_adaptive']['api_logging']['response'])) {
      watchdog('commerce_marketplace_paypal_wps', 'IPN validation response: !response', array(
        '!response' => '<pre>' . var_export($response, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // If an error occurred during processing, log the message and exit.
    if (property_exists($response, 'error')) {
      watchdog('commerce_marketplace_paypal', 'Attempt to validate IPN failed with error @code: @error', array('@code' => $response->code, '@error' => $response->error), WATCHDOG_ERROR);
      return FALSE;
    }

    // If the IPN was invalid, log a message and exit.
    if ($response->data == 'INVALID') {
      watchdog('commerce_marketplace_paypal', 'Invalid IPN received and ignored.', array(), WATCHDOG_ALERT);
      return FALSE;
    }
  }
  else {
    $ipn = $debug_ipn;
  }

  // If the payment method specifies full IPN logging, do it now.
  if (!empty($payment_method['settings']['ipn_logging']) &&
    $payment_method['settings']['ipn_logging'] == 'full_ipn') {
    if (!empty($ipn['txn_id'])) {
      watchdog('commerce_marketplace_paypal', 'Attempting to process IPN @txn_id. !ipn_log', array('@txn_id' => $ipn['txn_id'], '!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }
    else {
      watchdog('commerce_marketplace_paypal', 'Attempting to process an IPN. !ipn_log', array('!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>'), WATCHDOG_NOTICE);
    }
  }

  // Exit if the IPN has already been processed.
  $txn_id = commerce_marketplace_paypal_ipn_txn_id($ipn);
  if (!empty($txn_id) && $prior_ipn = commerce_paypal_ipn_load($txn_id)) {
    if (
      !empty($ipn['payment_status']) && $prior_ipn['payment_status'] == $ipn['payment_status']
      || !empty($ipn['status']) && $prior_ipn['status'] == $ipn['status']
    ) {
      watchdog('commerce_marketplace_paypal', 'Attempted to process an IPN that has already been processed with transaction ID @txn_id.', array('@txn_id' => $txn_id), WATCHDOG_NOTICE);
      return FALSE;
    }
  }

//  if (!empty($ipn['invoice']) && strpos($ipn['invoice'], '-') !== FALSE) {
//    list($ipn['order_id'], $timestamp) = explode('-', $ipn['invoice']);
//  }
//  elseif (!empty($ipn['invoice'])) {
//    $ipn['order_id'] = $ipn['invoice'];
//  }
//  else {
//    $ipn['order_id'] = 0;
//    $timestamp = 0;
//  }

  // Load the order(s) based on the IPN's invoice number.
  // WPS IPN.
  if (!empty($ipn['invoice'])) {
    list($ipn['order_id'], $timestamp) = explode('-', $ipn['invoice']);
    $main_order = commerce_order_load($ipn['order_id']);
    // If payments are sent to main store, we want to process all orders from
    // the order group, and create payment transaction for each one of them.
    if (variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) == 'main_store') {
      $orders = commerce_order_load_multiple(NULL, array('order_group' => $main_order->order_group), TRUE);
    }
    // If payments are sent to merchants though, and we did not use Adaptive
    // Payments, we want to process only single order here (regardless of how
    // many of them are in the order group).
    else {
      $orders = array($main_order);
    }
  }
  // Adaptive Payments IPN.
  else {
    if (!empty($ipn['transaction']) && is_array($ipn['transaction'])) {
      $order_ids = array();
      foreach ($ipn['transaction'] as $transaction) {
        if (!empty($transaction['invoice'])) {
          list($order_id, $timestamp) = explode('-', $transaction['invoice']);
          $order_ids[] = $order_id;
        }
      }
      $orders = commerce_order_load_multiple($order_ids);
    }
    if (!empty($ipn['transaction'])) {
      list($ipn['order_id'], $timestamp) = explode('-', $ipn['tracking_id']);
      // If loading orders from $ipn['transaction'] above failed for any reason,
      // load all the orders from the order group.
      if (empty($orders)) {
        $main_order = commerce_order_load($ipn['order_id']);
        $orders = commerce_order_load_multiple(NULL, array('order_group' => $main_order->order_group), TRUE);
      }
    }
  }

  // By default we don't want to save IPN in the db. We will do it only if it
  // validates against at least one of the orders.
  $save_ipn = FALSE;

  // Loop through all orders from the order group
  // and call IPN validation and processing functions for each one of them.
  if (!empty($orders)) {
    foreach ($orders as $order) {

      // Give the payment method module an opportunity to validate the receiver
      // e-mail address and amount of the payment if possible. If a validate
      // function exists, it is responsible for setting its own watchdog message.
      if (!empty($payment_method)) {
        /**
         * @see commerce_marketplace_paypal_wps_paypal_ipn_validate()
         * @see commerce_paypal_wps_paypal_ipn_validate()
         */
        $callback = $payment_method['base'] . '_paypal_ipn_validate';

        // Marketplace-specific: try to replace default callback function
        // with related marketplace callback if it exists.
        $marketplace_callback = str_replace('commerce_paypal', 'commerce_marketplace_paypal', $callback);
        if (function_exists($marketplace_callback)) {
          $callback = $marketplace_callback;
        }

        // If a validator function existed...
        if (function_exists($callback)) {
          // Only exit if the function explicitly returns FALSE.
          if ($callback($order, $payment_method, $ipn) === FALSE) {
            return FALSE;
          }
        }
      }

      // Give the payment method module an opportunity to process the IPN.
      if (!empty($payment_method)) {
        /**
         * @see commerce_marketplace_paypal_wps_paypal_ipn_process()
         * @see commerce_paypal_wps_paypal_ipn_process()
         */
        $callback = $payment_method['base'] . '_paypal_ipn_process';

        // Marketplace-specific: try to replace default callback function
        // with related marketplace callback if it exists.
        $marketplace_callback = str_replace('commerce_paypal', 'commerce_marketplace_paypal', $callback);
        if (function_exists($marketplace_callback)) {
          $callback = $marketplace_callback;
        }

        // If a processing function existed...
        if (function_exists($callback)) {
          // Skip saving if the function explicitly returns FALSE, meaning the IPN
          // wasn't actually processed. For marketplace though, when processing
          // multiple orders, if at least one of them was processed correctly,
          // we still want to save the IPN.
          if ($callback($order, $payment_method, $ipn) !== FALSE) {
            $save_ipn = TRUE;
          }
        }
      }

      // Invoke the hook here so implementations have access to the order and
      // payment method if available and a saved IPN array that includes the payment
      // transaction ID if created in the payment method's default process callback.
      module_invoke_all('commerce_paypal_ipn_process', $order, $payment_method, $ipn);

      // Invoke an additional hook for any marketplace-specific processing.
      module_invoke_all('commerce_marketplace_paypal_ipn_process', $order, $payment_method, $ipn);
    }
  }

  // Save the processed IPN details.
  if ($save_ipn) {
    // Save the IPN.
    if (
      !empty($ipn['transaction_type'])
      && $ipn['transaction_type'] == 'Adaptive Payment PAY'
    ) {
      commerce_marketplace_paypal_wps_adaptive_ipn_save($ipn);
    }
    else {
      commerce_paypal_ipn_save($ipn);
    }
    // Save the relationship between IPN, all orders from the order group
    // and all payment transactions created for all these orders.
    commerce_marketplace_paypal_ipn_transaction_save($ipn);
  }
}

/**
 * Converts raw POST data to an array.
 *
 * This function should be used to convert IPN details read from PHP input
 * stream instead of $_POST, to avoid serialization issues with array data,
 * as recommended by PayPal IPN processing documentation.
 *
 * See https://developer.paypal.com/docs/classic/ipn/ht_ipn/ for more info.
 *
 * @param string $raw_post_data
 * @return array
 */
function commerce_marketplace_paypal_raw_post_data_to_array($raw_post_data) {
  $raw_post_array = explode('&', urldecode($raw_post_data));

  $ipn = array();
  foreach ($raw_post_array as $keyval) {
    list($key, $value) = explode ('=', $keyval, 2);
    // When using Adaptive Payments, PayPal returns transactions details
    // in the multidimensional HTTP-encoded array, which unfortunately is not
    // compatible with parse_str() or anything else for that matter. We are
    // getting values like 'transaction%5B0%5D.is_primary_receiver=false',
    // which need to be converted into multidimensional array using this
    // fancy custom code.
    if (preg_match('/([a-z]+)\[([0-9]+)\]\.([a-z_]+)/', $key, $matches)) {
      $key = $matches[1];
      $delta = $matches[2];
      $subkey = $matches[3];
      $ipn[$key][$delta][$subkey] = $value;
    }
    else {
      $ipn[$key] = urldecode($value);
    }
  }

  return $ipn;
}

/**
 * Saves the relationship between IPN and payment transaction.
 *
 * @param array $ipn
 *   An IPN array with additional parameters for the order_id and Commerce
 *   Payment transaction_id associated with the IPN.
 *
 * @see commerce_paypal_ipn_save()
 */
function commerce_marketplace_paypal_ipn_transaction_save($ipn) {
  foreach ($ipn['transaction_ids'] as $order_id => $transaction_id) {
    $record = array(
      'ipn_id' => $ipn['ipn_id'],
      'order_id' => $order_id,
      'transaction_id' => $transaction_id,
    );
    if (!commerce_marketplace_paypal_ipn_transaction_load($record)) {
      drupal_write_record('commerce_marketplace_paypal_ipn_transaction', $record);
    }
  }
}

/**
 * Loads the relationship between IPN and payment transaction.
 *
 * @param array $conditions
 *   An array of condition to use for loading the relationship.
 *
 * @return array|null
 *   A relationship as an array or NULL if nothing was found.
 *
 * @see commerce_marketplace_paypal_ipn_transaction_save()
 */
function commerce_marketplace_paypal_ipn_transaction_load($conditions) {
  $query = db_select('commerce_marketplace_paypal_ipn_transaction', 'cpit')
    ->fields('cpit');
  foreach ($conditions as $key => $value) {
    $query->condition('cpit.' . $key, $value);
  }
  return $query->execute()
    ->fetchAssoc();
}

/**
 * Returns a unique invoice number based on the Order ID and timestamp.
 */
function commerce_marketplace_paypal_ipn_invoice($orders) {
  return implode('-', array_keys($orders)) . '-' . REQUEST_TIME;
}

/**
 * Returns txn_id value from IPN based on used PayPal payment solution.
 *
 * @param array $ipn
 * @return string|null
 */
function commerce_marketplace_paypal_ipn_txn_id($ipn) {
  if (
    !empty($ipn['transaction_type'])
    && $ipn['transaction_type'] == 'Adaptive Payment PAY'
  ) {
    return $ipn['pay_key'];
  }
  elseif (!empty($ipn['txn_id'])) {
    return $ipn['txn_id'];
  }
}
