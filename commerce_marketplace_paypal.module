<?php
/**
 * @file
 * Adapts Commerce Paypal features for Commerce Marketplace.
 */

/**
 * Implements hook_menu_alter().
 *
 * Alters menu item callback for incoming IPN processing.
 *
 * @see commerce_paypal_menu()
 */
function commerce_marketplace_paypal_menu_alter(&$items) {
  if (isset($items['commerce_paypal/ipn'])) {
    $items['commerce_paypal/ipn']['page callback'] = 'commerce_marketplace_paypal_process_ipn';
  }
  if (isset($items['commerce_paypal/ipn/%commerce_payment_method_instance'])) {
    $items['commerce_paypal/ipn/%commerce_payment_method_instance']['page callback'] = 'commerce_marketplace_paypal_process_ipn';
  }
}

/**
 * Processes an incoming IPN.
 *
 * @param array $payment_method
 *   The payment method instance array that originally made the payment.
 * @param array $debug_ipn
 *   Optionally specify an IPN array for debug purposes; if left empty, the IPN
 *   be pulled from the input stream. If an IPN is passed in, validation of
 *   the IPN at PayPal will be bypassed.
 *
 * @return
 *   TRUE or FALSE indicating whether the IPN was successfully processed or not.
 *
 * @see commerce_paypal_process_ipn()
 */
function commerce_marketplace_paypal_process_ipn($payment_method = NULL, $debug_ipn = array()) {
  // We do not want to retrieve the IPN data from $_POST, as original
  // commerce_paypal_process_ipn() does it, as it might cause serialization
  // issues with array data in the POST. Instead, we will read raw POST data
  // from the input stream.
  // See https://developer.paypal.com/docs/classic/ipn/ht_ipn/ and
  // http://enjoysmile.com/blog/24/paypal-adaptive-payments-and-ipn-part-two/
  // for more information.
  if (empty($debug_ipn)) {
    $raw_post_data = file_get_contents('php://input');

    // Log the raw IPN if logging is enabled.
    if (!empty($payment_method['settings']['api_logging']['response'])) {
      watchdog('commerce_marketplace_paypal', 'Received raw IPN: !ipn', array(
        '!ipn' => '<pre>' . var_export($raw_post_data, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // Convert raw POST string data to an array.
    $ipn = commerce_marketplace_paypal_raw_post_data_to_array($raw_post_data);

    // Log the decoded IPN if logging is enabled.
    if (!empty($payment_method['settings']['api_logging']['response'])) {
      watchdog('commerce_marketplace_paypal', 'Received decoded IPN: !ipn', array(
        '!ipn' => '<pre>' . var_export($ipn, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // Exit now if the $_POST was empty.
    if (empty($ipn)) {
      watchdog('commerce_marketplace_paypal', 'IPN URL accessed with no POST data submitted.', array(), WATCHDOG_WARNING);
      return FALSE;
    }

    // Prepare data to POST back to PayPal to validate the IPN.
    $validate_ipn = 'cmd=_notify-validate&' . $raw_post_data;

    // Determine the proper PayPal server to post IPN validation to.
    $server = (!empty($ipn['test_ipn'])) ? 'sandbox' : 'live';
    $host = commerce_paypal_wps_server_url($server);

    // Log the IPN validation request if logging is enabled.
    if (!empty($payment_method['settings']['api_logging']['request'])) {
      watchdog('commerce_marketplace_paypal', 'IPN validation request: !request', array(
        '!request' => '<pre>' . var_export($validate_ipn, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // Process the HTTP request to validate the IPN.
    $response = drupal_http_request($host, array(
      'method' => 'POST',
      'data' => $validate_ipn,
    ));

    // Log the IPN validation response if logging is enabled.
    if (!empty($payment_method['settings']['api_logging']['response'])) {
      watchdog('commerce_marketplace_paypal', 'IPN validation response: !response', array(
        '!response' => '<pre>' . var_export($response, TRUE) . '</pre>',
      ), WATCHDOG_DEBUG);
    }

    // If an error occurred during processing, log the message and exit.
    if (property_exists($response, 'error')) {
      watchdog('commerce_marketplace_paypal', 'Attempt to validate IPN failed with error @code: @error', array('@code' => $response->code, '@error' => $response->error), WATCHDOG_ERROR);
      return FALSE;
    }

    // If the IPN was invalid, log a message and exit.
    if ($response->data == 'INVALID') {
      watchdog('commerce_marketplace_paypal', 'Invalid IPN received and ignored.', array(), WATCHDOG_ALERT);
      return FALSE;
    }
  }
  else {
    $ipn = $debug_ipn;
  }

  $txn_id = commerce_marketplace_paypal_ipn_get_variable($ipn, 'txn_id');

  // If the payment method specifies full IPN logging, do it now.
  if (
    !empty($payment_method['settings']['ipn_logging'])
    && $payment_method['settings']['ipn_logging'] == 'full_ipn'
  ) {
    if (!empty($txn_id)) {
      watchdog('commerce_marketplace_paypal', 'Attempting to process IPN @txn_id. !ipn_log', array(
        '@txn_id' => $txn_id,
        '!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>',
      ), WATCHDOG_NOTICE);
    }
    else {
      watchdog('commerce_marketplace_paypal', 'Attempting to process an IPN. !ipn_log', array(
        '!ipn_log' => '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>',
      ), WATCHDOG_NOTICE);
    }
  }

  // Exit if the IPN has already been processed.
  if (!empty($txn_id) && $prior_ipn = commerce_marketplace_paypal_ipn_load($txn_id)) {
    $current_status = commerce_marketplace_paypal_ipn_get_variable($ipn, 'payment_status');
    $prior_status = commerce_marketplace_paypal_ipn_get_variable($prior_ipn, 'payment_status');

    if (!empty($current_status) && $current_status == $prior_status) {
      watchdog('commerce_marketplace_paypal', 'Attempted to process an IPN that has already been processed with transaction ID @txn_id.', array(
        '@txn_id' => $txn_id,
      ), WATCHDOG_NOTICE);
      return FALSE;
    }
  }

  if ($order_id = commerce_marketplace_paypal_ipn_get_variable($ipn, 'invoice')) {
    // 'invoice' values should be in format '<order_id>-<REQUEST_TIME>'.
    if (strpos($order_id, '-') !== FALSE) {
      list($order_id, ) = explode('-', $order_id);
    }
    $ipn['order_id'] = $order_id;
  }

  // Load the order(s) based on the IPN's invoice number.
  $orders = commerce_marketplace_paypal_ipn_get_orders($ipn);

  // By default we don't want to save IPN in the db. We will do it only if it
  // validates against at least one of the orders.
  $save_ipn = FALSE;

  // Loop through all orders from the order group
  // and call IPN validation and processing functions for each one of them.
  if (!empty($orders)) {
    foreach ($orders as $order) {

      // Give the payment method module an opportunity to validate the receiver
      // e-mail address and amount of the payment if possible. If a validate
      // function exists, it is responsible for setting its own watchdog message.
      if (!empty($payment_method)) {
        $callback = $payment_method['base'] . '_paypal_ipn_validate';

        // Try to replace default callback function with related
        // marketplace-specific callback if such exists.
        $marketplace_callback = str_replace('commerce_paypal', 'commerce_marketplace_paypal', $callback);
        if (function_exists($marketplace_callback)) {
          $callback = $marketplace_callback;
        }

        // If a validator function exists...
        if (function_exists($callback)) {
          // Skip further processing of the IPN for current order
          // if its validation against this order failed.
          if ($callback($order, $payment_method, $ipn) === FALSE) {
            continue;
          }
        }
      }

      // Give the payment method module an opportunity to process the IPN.
      if (!empty($payment_method)) {
        $callback = $payment_method['base'] . '_paypal_ipn_process';

        // Try to replace default callback function with related
        // marketplace-specific callback if such exists.
        $marketplace_callback = str_replace('commerce_paypal', 'commerce_marketplace_paypal', $callback);
        if (function_exists($marketplace_callback)) {
          $callback = $marketplace_callback;
        }

        // If a processing function exists...
        if (function_exists($callback)) {
          // If the processing function does not return FALSE, it means that
          // the IPN was actually processed. In marketplace case, if an IPN
          // was successfully processed for at least one order from the order
          // group, then we need to save it.
          if ($callback($order, $payment_method, $ipn) !== FALSE) {
            $save_ipn = TRUE;
          }
        }
      }

      // Invoke the hook here so implementations have access to the order and
      // payment method if available and a saved IPN array that includes the payment
      // transaction ID if created in the payment method's default process callback.
      module_invoke_all('commerce_paypal_ipn_process', $order, $payment_method, $ipn);

      // Invoke an additional hook for any marketplace-specific processing.
      module_invoke_all('commerce_marketplace_paypal_ipn_process', $order, $payment_method, $ipn);
    }
  }

  // Save the processed IPN details.
  if ($save_ipn) {
    commerce_paypal_ipn_save($ipn);

    // Invoke an additional hook for any marketplace-specific IPN saving.
    module_invoke_all('commerce_marketplace_paypal_ipn_save', $ipn);
  }
}

/**
 * Converts raw POST data to an array.
 *
 * This function should be used to convert IPN details read from PHP input
 * stream instead of $_POST, to avoid serialization issues with array data,
 * as recommended by PayPal IPN processing documentation.
 *
 * See https://developer.paypal.com/docs/classic/ipn/ht_ipn/ for more info.
 *
 * @param string $raw_post_data
 *   A string containing raw POST data read directly from the input stream.
 *
 * @return array
 *   An array of formatted POST data.
 */
function commerce_marketplace_paypal_raw_post_data_to_array($raw_post_data) {
  $raw_post_array = explode('&', urldecode($raw_post_data));

  $ipn = array();
  foreach ($raw_post_array as $keyval) {
    list($key, $value) = explode ('=', $keyval, 2);
    // When using Adaptive Payments, PayPal returns transactions details
    // in the nested HTTP-encoded array, which unfortunately is not compatible
    // with parse_str() or anything else for that matter. We are getting values
    // like 'transaction[0].status=Completed', which need to be converted into
    // nested array like $ipn['transaction'][0]['status'] => 'Completed'
    // using this fancy custom code.
    if (preg_match('/([a-z]+)\[([0-9]+)\]\.([a-z_]+)/', $key, $matches)) {
      $key = $matches[1];
      $delta = $matches[2];
      $subkey = $matches[3];
      $ipn[$key][$delta][$subkey] = $value;
    }
    else {
      $ipn[$key] = urldecode($value);
    }
  }

  return $ipn;
}

/**
 * Returns a unique invoice number based on the Order ID and timestamp.
 *
 * @param array $orders
 *   An array of orders for which to return the invoice number.
 *
 * @return string
 *   A string concatenating order IDs and request timestamp.
 *
 * @see commerce_paypal_ipn_invoice()
 */
function commerce_marketplace_paypal_ipn_invoice($orders) {
  return implode('-', array_keys($orders)) . '-' . REQUEST_TIME;
}

/**
 * Returns txn_id value from IPN based on used PayPal payment solution.
 *
 * @param array $ipn
 *   An array of IPN values to return the selected variable value from.
 * @param string $variable_name
 *   An IPN variable which value should be returned.
 *
 * @return mixed
 *   A value of selected variable.
 */
function commerce_marketplace_paypal_ipn_get_variable($ipn, $variable_name) {
  $value = NULL;

  if (!empty($ipn[$variable_name])) {
    $value = $ipn[$variable_name];
  }

  // Allow other modules to alter the value of selected variable.
  drupal_alter('commerce_marketplace_paypal_ipn_variable', $value, $ipn, $variable_name);

  return $value;
}

/**
 * Returns an array of orders for which the IPN should be processed.
 *
 * @param array $ipn
 *   An IPN array.
 *
 * @return array
 *   An array of orders for which the IPN should be processed.
 */
function commerce_marketplace_paypal_ipn_get_orders($ipn) {
  $orders = array();



  if (!empty($ipn['invoice'])) {
    if (strpos($ipn['invoice'], '-') !== FALSE) {
      list($order_id, ) = explode('-', $ipn['invoice']);
    }
    else {
      $order_id = $ipn['invoice'];
    }
    $main_order = commerce_order_load($order_id);

    // If payments are sent to main store, we want to process all orders from
    // the order group, and create payment transaction for each one of them.
    if (variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) == 'main_store') {
      $orders = commerce_order_load_multiple(NULL, array('order_group' => $main_order->order_group), TRUE);
    }
    // If payments are sent to merchants though, and we did not use Adaptive
    // Payments, we want to process only single order here (regardless of how
    // many of them are in the order group).
    else {
      $orders = array($main_order);
    }
  }

  // Allow other modules to alter the orders to process.
  drupal_alter('commerce_marketplace_paypal_ipn_orders', $orders, $ipn);

  return $orders;
}

/**
 * Loads a stored IPN by its txn_id or other specific variable.
 *
 * @param mixed $value
 *   The value of the variable_name for which the IPN should be loaded.
 * @param string $variable_name
 *   A name of the variable for which value should be used to load the IPN.
 *
 * @return
 *   The original IPN with some meta data related to local processing.
 */
function commerce_marketplace_paypal_ipn_load($value, $variable_name = 'txn_id') {
  $ipn = db_select('commerce_paypal_ipn', 'i')
    ->fields('i')
    ->condition('i.' . $variable_name, $value)
    // Allow other modules to alter this query.
    ->addTag('commerce_marketplace_paypal_ipn_load')
    ->execute()
    ->fetchAssoc();

  return $ipn;
}
