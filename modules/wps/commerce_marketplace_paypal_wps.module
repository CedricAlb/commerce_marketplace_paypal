<?php
/**
 * @file
 * Adapts PayPal Website Payments Standard features for Commerce Marketplace.
 */

/**
 * Maximum number of receivers for PayPal Adaptive Payments.
 */
define('COMMERCE_MARKETPLACE_PAYPAL_WPS_ADAPTIVE_MAX_RECEIVERS', 10);

/**
 * When sending a payment request to PayPal Adaptive Payments, we will add
 * a prefix to each invoice number for each receiver to know whether each
 * transaction was sent to the marketplace (M) or to a vendor (V). Also,
 * additional prefix F will be used for 'marketplace fee' transactions
 * sent to the marketplace. (In case of chained payments, where marketplace
 * always is the primary receiver, if such transaction includes marketplace
 * fees as well, t will be prefixed with FM).
 */
define('COMMERCE_MARKETPLACE_PAYPAL_WPS_INVOICE_PREFIX_MARKETPLACE', 'M');
define('COMMERCE_MARKETPLACE_PAYPAL_WPS_INVOICE_PREFIX_VENDOR', 'V');
define('COMMERCE_MARKETPLACE_PAYPAL_WPS_INVOICE_PREFIX_FEE', 'F');

/**
 * PayPal Adaptive Payments-specific features.
 */
include_once 'commerce_marketplace_paypal_wps.adaptive.inc';

/**
 * Implements hook_commerce_payment_method_info_alter().
 *
 * Adds support for parallel and chained payments to PayPal WPS
 * payment method definition.
 *
 * @see commerce_paypal_wps_commerce_payment_method_info()
 */
function commerce_marketplace_paypal_wps_commerce_payment_method_info_alter(&$payment_methods) {
  if (isset($payment_methods['paypal_wps'])) {
    $payment_methods['paypal_wps']['parallel'] = TRUE;
    $payment_methods['paypal_wps']['chained'] = TRUE;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for rules_ui_edit_element.
 *
 * Alters PayPal WPS payment method settings form adding
 * PayPal Adaptive Payments-specific configuration.
 *
 * @see commerce_paypal_wps_settings_form()
 */
function commerce_marketplace_paypal_wps_form_rules_ui_edit_element_alter(&$form, &$form_state) {
  if (
    !empty($form_state['element_settings']['payment_method']['method_id'])
    && $form_state['element_settings']['payment_method']['method_id'] == 'paypal_wps'
  ) {
    $settings = $form_state['element_settings']['payment_method']['settings'];
    // Merge default settings into the stored settings array.
    $settings = array_replace_recursive(commerce_marketplace_paypal_wps_adaptive_default_settings(), $settings);

    // API request/response logging is not really related specifically to
    // Adaptive Payments, so we'll add it outsite of Adaptive Payments fieldset.
    $form['parameter']['payment_method']['settings']['payment_method']['settings']['api_logging'] = array(
      '#type' => 'checkboxes',
      '#title' => t('Log the following messages for debugging'),
      '#options' => array(
        'request' => t('API request messages'),
        'response' => t('API response messages'),
      ),
      '#default_value' => $settings['api_logging'],
    );

    // Settings specific to PayPal Adaptive Payments.
    $description = '<p>' . t('PayPal Adaptive Payments will be used when <a href="@payments_url">payments are configured to be sent directly to merchants</a>, and all related merchants (stores) have <em>PayPal WPS</em> payment method enabled and configured.', array(
      '@payments_url' => url('admin/commerce/marketplace/payment'),
    )) . '</p>';
    $description .= '<p>' . t('For more information on obtaining the following details, see the <a href="@sandbox_doc_url">PayPal Sandbox</a> documentation, <a href="@sandbox_url">Getting Your API Test Credentials</a> and <a href="@live_url">Obtaining your live PayPal credentials</a>.', array(
      '@sandbox_doc_url' => url('https://developer.paypal.com/docs/classic/lifecycle/ug_sandbox/'),
      '@sandbox_url' => url('https://developer.paypal.com/docs/classic/lifecycle/sb_credentials/'),
      '@live_url' => url('https://developer.paypal.com/docs/classic/lifecycle/goingLive/#credentials'),
    )) . '</p>';
    $form['parameter']['payment_method']['settings']['payment_method']['settings']['marketplace_adaptive'] = array(
      '#type' => 'fieldset',
      '#title' => t('Marketplace Adaptive Payments settings'),
      '#description' => $description,
    );
    $subform = &$form['parameter']['payment_method']['settings']['payment_method']['settings']['marketplace_adaptive'];

    $subform['application_id'] = array(
      '#type' => 'textfield',
      '#title' => t('PayPal application id'),
      '#description' => t('Your PayPal application\'s identification, issued by PayPal.'),
      '#default_value' => $settings['marketplace_adaptive']['application_id'],
      '#required' => TRUE,
    );

    $subform['api_username'] = array(
      '#type' => 'textfield',
      '#title' => t('PayPal API username'),
      '#description' => t('Your PayPal API username.'),
      '#default_value' => $settings['marketplace_adaptive']['api_username'],
      '#required' => TRUE,
    );

    $subform['api_password'] = array(
      '#type' => 'textfield',
      '#title' => t('PayPal API password'),
      '#description' => t('Your PayPal API password.'),
      '#default_value' => $settings['marketplace_adaptive']['api_password'],
      '#required' => TRUE,
    );

    $subform['api_signature'] = array(
      '#type' => 'textfield',
      '#title' => t('PayPal API signature'),
      '#description' => t('Your PayPal API signature.'),
      '#default_value' => $settings['marketplace_adaptive']['api_signature'],
      '#required' => TRUE,
    );

    $subform['payment_type'] = array(
      '#type' => 'select',
      '#title' => t('Payment type'),
      '#description' => t('See <a href="@url">Introducing Adaptive Payments</a> for more information.', array(
        '@url' => url('https://developer.paypal.com/docs/classic/adaptive-payments/integration-guide/APIntro/'),
      )),
      '#options' => array(
        'parallel' => t('parallel'),
        'chained' => t('chained'),
      ),
      '#default_value' => $settings['marketplace_adaptive']['payment_type'],
      '#required' => TRUE,
    );

    $description = array(
      t('<code>SENDER</code> - Sender pays all fees (for personal, implicit simple/parallel payments; do not use for chained or unilateral payments)'),
      t('<code>PRIMARYRECEIVER</code> - Primary receiver pays all fees (chained payments only)'),
      t('<code>EACHRECEIVER</code> - Each receiver pays their own fee (default, personal and unilateral payments)'),
      t('<code>SECONDARYONLY</code> - Secondary receivers pay all fees (use only for chained payments with one secondary receiver)'),
    );
    $subform['fees_payer'] = array(
      '#type' => 'select',
      '#title' => t('The payer of PayPal fees'),
      '#description' => theme('item_list', array('items' => $description)),
      '#options' => array(
        'SENDER' => t('sender'),
        'PRIMARYRECEIVER' => t('primary receiver'),
        'EACHRECEIVER' => t('each receiver'),
        'SECONDARYONLY' => t('secondary receiver'),
      ),
      '#default_value' => $settings['marketplace_adaptive']['fees_payer'],
    );

    $subform['reverse_all_parallel_payments_on_error'] = array(
      '#type' => 'select',
      '#title' => t('Reverse parallel payments on error'),
      '#description' => t('PayPal <a href="@url">recommends</a> setting this option to <em>all parallel payments.</em>', array(
        '@url' => url('https://developer.paypal.com/docs/classic/api/adaptive-payments/Pay_API_Operation/'),
      )),
      '#options' => array(
        'true' => t('all parallel payments'),
        'false' => t('only incomplete payments'),
      ),
      '#default_value' => $settings['marketplace_adaptive']['reverse_all_parallel_payments_on_error'],
    );

    $subform['max_orders_message'] = array(
      '#type' => 'textarea',
      '#title' => t('Cart limit message'),
      '#description' => t('Maximum number of receivers for Adaptive Payments is @max_parallel (@max_chained secondary receivers for chained payments), therefore when using Adaptive Payments during the checkout process, the number of orders cannot be higher than number of possible receivers. This message will be displayed to a customer trying to checkout with more orders than allowed. You can use the <code>@limit</code> token to include max number of orders in the message.', array(
        '@max_parallel' => COMMERCE_MARKETPLACE_PAYPAL_WPS_ADAPTIVE_MAX_RECEIVERS,
        '@max_chained' => COMMERCE_MARKETPLACE_PAYPAL_WPS_ADAPTIVE_MAX_RECEIVERS - 1,
      )),
      '#default_value' => $settings['marketplace_adaptive']['max_orders_message'],
      '#rows' => 2,
    );

    $subform['marketplace_fee'] = array(
      '#type' => 'textfield',
      '#title' => t('Marketplace fee'),
      '#description' => t('Marketplace transaction fee associated with each payment to final receiver, expressed as percentage of amount of each transaction. Enter <em>0</em> for no fee to be collected.')
        . '<br />' . t('If a non-zero value is provided, the relevant percentage will be deducted from transactions sent to final receivers. Additionally, for <em>parallel</em> payments, a new transaction will be created transferring deducted amount to the main Marketplace PayPal account.'),
      '#size' => 5,
      '#field_suffix' => '%',
      '#default_value' => $settings['marketplace_adaptive']['marketplace_fee'],
    );

    $subform['marketplace_fee_rounding_mode'] = array(
      '#type' => 'select',
      '#title' => t('Marketplace fee rounding mode'),
      '#options' => commerce_round_mode_options_list(),
      '#default_value' => $settings['marketplace_adaptive']['marketplace_fee_rounding_mode'],
      '#states' => array(
        'visible' => array(
          ':input[name="parameter[payment_method][settings][payment_method][settings][marketplace_adaptive][marketplace_fee]"]' => array('!value' => 0),
        ),
      ),
    );

    // Add info on 'Payment action' element about missing support
    // for Authorization action when using PayPal Adaptive Payments.
    $form['parameter']['payment_method']['settings']['payment_method']['settings']['payment_action']['#description'] = t('Note that <em>Authorization</em> action is not (yet) supported by <em>Commerce Marketplace PayPal</em> for using with parallel payments.');
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_marketplace_payment_method_form.
 *
 * Alters PayPal WPS payment method configuration form used for stores,
 * removing few options which store owners don't have to or shouldn't have
 * access to.
 *
 * @see commerce_marketplace_payment_method_form()
 */
function commerce_marketplace_paypal_wps_form_commerce_marketplace_payment_method_form_alter(&$form, &$form_state) {
  $payment_method_id = $form_state['build_info']['args'][1];
  if ($payment_method_id == 'paypal_wps') {
    // Remove 'IPN logging'.
    unset($form['ipn_logging']);
    // Remove 'Create a billing profile based on name and country data in the IPN
    // for any order that does not have one yet'.
    unset($form['ipn_create_billing_profile']);
    // Remove 'Show a message on the checkout form when PayPal WPS is selected
    // telling the customer to "Continue with checkout to complete payment
    // via PayPal."'.
    unset($form['show_payment_instructions']);
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for commerce_paypal_wps_redirect_form.
 *
 * @see commerce_paypal_wps_redirect_form()
 * @see commerce_marketplace_payment_redirect_pane_checkout_form()
 */
function commerce_marketplace_paypal_wps_form_commerce_paypal_wps_redirect_form_alter(&$form, &$form_state) {
  $order = $form_state['build_info']['args'][0];
  $payment_method = $form_state['build_info']['args'][1];

  // Using PayPal Adaptive Payments, first we need to get the pay key, which
  // needs to be sent as a parameter when redirecting customer to PayPal.
  // This is added in commerce_marketplace_payment_redirect_pane_checkout_form().
  if (!empty($order->data['commerce_marketplace_payment_parallel'])) {

    // Before the redirect form could be submitted and customer actually
    // redirected to PayPayl, when using Adaptive Payments first we need to send
    // all the information about payments being requested to PayPal in the
    // backgroun, then PayPal should return us the 'pay key', only using which
    // we can redirect a customer to PayPal to confirm the payment.
    $pay_key = commerce_marketplace_paypal_wps_adaptive_get_paykey($form, $form_state);

    // If there was an error getting the pay key from PayPal, we do not want
    // to redirect the user there, as they will be rejected.
    if ($pay_key === FALSE) {
      // Move all order to the previous checkout step and redirect back.
      $group_orders = commerce_order_load_multiple(NULL, array('order_group' => $order->order_group));
      foreach ($group_orders as $group_order) {
        commerce_payment_redirect_pane_previous_page($group_order, t('Failed to retrieve PayPal Adaptive Payments pay key.'));
      }
      drupal_goto(commerce_checkout_order_uri($order));
    }

    // To redirect a customer to PayPal using Adaptive Payments, we need to
    // add required parameters to the redirect URL.
    $command = commerce_marketplace_paypal_wps_adaptive_command($payment_method['settings']['payment_action']);
    $form['#action'] .= '?cmd=' . $command . '&paykey=' . $pay_key;

    // Also, as we have already sent all required payment data when requesting
    // the pay key, now we don't want to send them again, let's then unset all
    // non-default form elements (but we want to keep the submit button).
    foreach (element_children($form) as $key) {
      if (strpos($key, 'form_') === FALSE && $key != 'submit') {
        unset($form[$key]);
      }
    }
  }
}

/**
 * Provides marketplace-specific PayPal WPS IPN validation.
 *
 * @param object $order
 *   An order which the IPN should be validated against.
 * @param array $payment_method
 *   The payment method definition.
 * @param array $ipn
 *   An array of IPN values.
 *
 * @return bool
 *   A boolean indicating whether the IPN was validated or not.
 *
 * @see commerce_marketplace_paypal_process_ipn()
 * @see commerce_paypal_wps_paypal_ipn_validate()
 */
/**
 */
function commerce_marketplace_paypal_wps_paypal_ipn_validate($order, $payment_method, $ipn) {
  // Prepare a trimmed list of receiver e-mail addresses.
  $defined_receiver_emails = commerce_marketplace_paypal_wps_receiver_emails($order, $payment_method);

  // Get the payment receiver's email from the WPS IPN.
  if (!empty($ipn['receiver_email'])) {
    $ipn_receiver_email = $ipn['receiver_email'];
  }
  // Get the payment receiver's email from the Adaptive Payments IPN.
  elseif (!empty($ipn['transaction']) && is_array($ipn['transaction'])) {
    foreach ($ipn['transaction'] as $transaction) {
      // 'invoice' values should be in format '<code>-<order_id>-<REQUEST_TIME>'.
      list(, $order_id, ) = explode('-', $transaction['invoice']);
      if ($order_id == $order->order_id && !empty($transaction['receiver'])) {
        $ipn_receiver_email = $transaction['receiver'];
      }
    }
  }
  $ipn_receiver_email = trim(strtolower($ipn_receiver_email));

  // Return FALSE if the receiver e-mail does not match one specified by the
  // payment method instance.
  if (!in_array($ipn_receiver_email, $defined_receiver_emails)) {
    commerce_payment_redirect_pane_previous_page($order);
    watchdog('commerce_paypal_wps', 'IPN rejected for order @order_number: invalid receiver e-mail specified (@receiver_email); must match one of the e-mail addresses on the PayPal account (@receiver_emails).', array(
      '@order_number' => $order->order_number,
      '@receiver_email' => $ipn_receiver_email,
      '@receiver_emails' => implode(', ', $defined_receiver_emails),
    ), WATCHDOG_NOTICE);
    return FALSE;
  }

  // Prepare the IPN data for inclusion in the watchdog message if enabled.
  $ipn_data = '';

  if (
    !empty($payment_method['settings']['ipn_logging'])
    && $payment_method['settings']['ipn_logging'] == 'full_ipn'
  ) {
    $ipn_data = '<pre>' . check_plain(print_r($ipn, TRUE)) . '</pre>';
  }

  // Log a message including the PayPal transaction ID if available.
  if ($txn_id = commerce_marketplace_paypal_ipn_get_variable($ipn, 'txn_id')) {
    watchdog('commerce_paypal_wps', 'IPN @txn_id validated for order @order_number. !ipn_data', array(
      '@order_number' => $order->order_number,
      '@txn_id' => $txn_id,
      '!ipn_data' => $ipn_data,
    ), WATCHDOG_NOTICE);
  }
  else {
    watchdog('commerce_paypal_wps', 'IPN validated for order @order_number. !ipn_data', array(
      '@order_number' => $order->order_number,
      '!ipn_data' => $ipn_data,
    ), WATCHDOG_NOTICE);
  }
}

/**
 * Processes an IPN once it has been validated.
 *
 * Overrides commerce_paypal_wps_paypal_ipn_process()
 *
 * @param object $order
 *   An order which the IPN should be validated against.
 * @param array $payment_method
 *   The payment method definition.
 * @param array $ipn
 *   An array of IPN values.
 *
 * @return bool
 *   A boolean indicating whether the IPN was successfully processed or not.
 *
 * @see commerce_marketplace_paypal_process_ipn()
 * @see commerce_paypal_wps_paypal_ipn_process()
 */
function commerce_marketplace_paypal_wps_paypal_ipn_process($order, $payment_method, &$ipn) {
  // IPN format for PayPal Adaptive Payments is quite different,
  // therefore its processing needs to be different as well.
  // Let's outsource it to a different function then.
  if (commerce_marketplace_paypal_wps_ipn_is_adaptive($ipn)) {
    return commerce_marketplace_paypal_wps_adaptive_paypal_ipn_process($order, $payment_method, $ipn);
  }

  // Do not perform any processing on WPS transactions here that do not have
  // transaction IDs, indicating they are non-payment IPNs such as those used
  // for subscription signup requests.
  if (empty($ipn['txn_id'])) {
    return FALSE;
  }

  // Exit when we don't get a payment status we recognize.
  if (!in_array($ipn['payment_status'], array('Failed', 'Voided', 'Pending', 'Completed', 'Refunded'))) {
    commerce_payment_redirect_pane_previous_page($order);
    return FALSE;
  }

  // If this is a prior authorization capture IPN for which we've already
  // created a transaction...
  if (
    in_array($ipn['payment_status'], array('Voided', 'Completed'))
    && !empty($ipn['auth_id'])
    && $auth_ipn = commerce_marketplace_paypal_ipn_load($ipn['auth_id'], $order->order_id)
  ) {
    // Load the prior IPN's transaction and update that with the capture values.
    // Marketplace-specific: we might have multiple payment transactions for
    // one IPN, so to load the correct transaction we first need to get its ID
    // from commerce_marketplace_paypal_wps_adaptive_ipn table based on order ID.
    $transaction = commerce_payment_transaction_load($auth_ipn['transaction_id']);
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new('paypal_wps', $order->order_id);
    $transaction->instance_id = $payment_method['instance_id'];
  }

  $transaction->remote_id = $ipn['txn_id'];
  $transaction->amount = commerce_currency_decimal_to_amount($ipn['mc_gross'], $ipn['mc_currency']);
  $transaction->currency_code = $ipn['mc_currency'];
  $transaction->payload[REQUEST_TIME . '-ipn'] = $ipn;

  // Marketplace-specific: if we are processing multiple orders from one order
  // group, the amount returned by an IPN will be equal to sum of total amount
  // of all those orders. But the local payment transaction amounts should match
  // each order total, so it needs to be updated here.
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  if ($transaction->amount > $order_wrapper->commerce_order_total->amount->value()) {
    $transaction->amount = $order_wrapper->commerce_order_total->amount->value();
  }

  // Set the transaction's statuses based on the IPN's payment_status.
  $transaction->remote_status = $ipn['payment_status'];

  // If we didn't get an approval response code...
  switch ($ipn['payment_status']) {
    case 'Failed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t("The payment has failed. This happens only if the payment was made from your customer’s bank account.");
      break;

    case 'Voided':
      $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
      $transaction->message = t('The authorization was voided.');
      break;

    case 'Pending':
      $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
      $transaction->message = commerce_paypal_ipn_pending_reason($ipn['pending_reason']);
      break;

    case 'Completed':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('The payment has completed.');
      break;

    case 'Refunded':
      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
      $transaction->message = t('Refund for transaction @txn_id', array('@txn_id' => $ipn['parent_txn_id']));
      break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);
  $ipn['transaction_id'] = $transaction->transaction_id;

  // Marketplace-specific: we also need a connection between *all* created
  // payment transactions and the IPN, which cannot be saved in the main
  // commerce_paypal_ipn table, where 'transaction_id' column is defined as int
  // (see commerce_paypal_schema()) - therefore we need to save it
  // in a different table, allowing for one-to-many relationships between
  // IPN ID and transaction ID.
  // See commerce_marketplace_paypal_ipn_transaction_save().
  $ipn['transaction_ids'][$order->order_id] = $transaction->transaction_id;

  // Create a billing profile based on the IPN if enabled.
  if (!empty($payment_method['settings']['ipn_create_billing_profile']) && isset($order->commerce_customer_billing)) {

    // If this order does not have a billing profile yet...
    if ($order_wrapper->commerce_customer_billing->value() === NULL) {
      // Ensure we have the required data in the IPN.
      if (empty($ipn['residence_country']) || empty($ipn['first_name']) || empty($ipn['last_name'])) {
        $data = array_intersect_key($ipn, drupal_map_assoc(array('residence_country', 'first_name', 'last_name')));
        watchdog('commerce_marketplace_paypal_wps', 'A billing profile for Order @order_number could not be created due to insufficient data in the IPN:!data', array('@order_number' => $order->order_number, '!data' => '<pre>'. check_plain(print_r($data, TRUE)) .'</pre>'), WATCHDOG_WARNING);
      }
      else {
        // Create the new profile now.
        $profile = commerce_customer_profile_new('billing', $order->uid);

        // Add the address value.
        $profile_wrapper = entity_metadata_wrapper('commerce_customer_profile', $profile);

        $profile_wrapper->commerce_customer_address = array_merge(addressfield_default_values(), array(
          'country' => $ipn['residence_country'],
          'name_line' => $ipn['first_name'] . ' ' . $ipn['last_name'],
          'first_name' => $ipn['first_name'],
          'last_name' => $ipn['last_name'],
        ));

        // Save the profile, reference it from the order, and save the order.
        $profile_wrapper->save();
        $order_wrapper->commerce_customer_billing = $profile_wrapper;
        $order_wrapper->save();

        watchdog('commerce_marketplace_paypal_wps', 'Billing profile created for Order @order_number containing the first and last names and residence country of the customer based on IPN data.', array('@order_number' => $order->order_number));
      }
    }
  }

  commerce_payment_redirect_pane_next_page($order);
  watchdog('commerce_marketplace_paypal_wps', 'IPN processed for Order @order_number with ID @txn_id.', array('@txn_id' => $ipn['txn_id'], '@order_number' => $order->order_number), WATCHDOG_INFO);
}

/**
 * Returns an array of payment receiver emails based on selected payment mode.
 *
 * @param object $order
 *   An order which the IPN is being processed against.
 * @param array $payment_method
 *   A payment method used.
 *
 * @return array
 *   An array of payment recipient emails.
 */
function commerce_marketplace_paypal_wps_receiver_emails($order, $payment_method) {
  $receiver_emails = array();

  // If payments are sent directly to merchant, we need to use store-specific
  // payment method configuration.
  if (variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) == 'merchants') {
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    if ($store = $order_wrapper->commerce_store->value()) {
      $store_payment_method_settings = $store->data['payment_methods']['settings'][$payment_method['method_id']];

      if (!empty($store_payment_method_settings['receiver_emails'])) {
        $receiver_emails = explode(',', $store_payment_method_settings['receiver_emails']);
      }

      // Add the business e-mail address to the list of addresses.
      $receiver_emails[] = $store_payment_method_settings['business'];
    }
  }

  if (
    variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) == 'merchants'
    && (
      $payment_method['settings']['marketplace_adaptive']['payment_type'] == 'chained'
      || !empty($payment_method['settings']['marketplace_adaptive']['marketplace_fee'])
    )
    || variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) != 'merchants'
  ) {
    if (!empty($payment_method['settings']['receiver_emails'])) {
      $receiver_emails = explode(',', $payment_method['settings']['receiver_emails']);
    }

    // Add the business e-mail address to the list of addresses.
    $receiver_emails[] = $payment_method['settings']['business'];
  }

  foreach ($receiver_emails as $key => &$email) {
    $email = trim(strtolower($email));
  }

  return $receiver_emails;
}

/**
 * Implements hook_commerce_marketplace_paypal_ipn_txn_id_alter().
 *
 * Some specific processing for PayPal Adaptive Payments IPNs.
 *
 * @see commerce_marketplace_paypal_process_ipn()
 */
function commerce_marketplace_paypal_wps_commerce_marketplace_paypal_ipn_variable_alter(&$value, $ipn, $variable_name) {
  if (commerce_marketplace_paypal_wps_ipn_is_adaptive($ipn)) {
    if ($variable_name == 'txn_id' && !empty($ipn['pay_key'])) {
      $value = $ipn['pay_key'];
    }
    if ($variable_name == 'txn_id' && !empty($ipn['pay_key'])) {
      $value = $ipn['pay_key'];
    }
    if ($variable_name == 'payment_status' && !empty($ipn['status'])) {
      $value = $ipn['status'];
    }
    if ($variable_name == 'invoice') {
      $value = NULL;
    }
  }
}

/**
 * Implements hook_commerce_marketplace_paypal_ipn_orders().
 *
 * Loads orders based on information in $ipn['transaction'] array.
 *
 * @see commerce_marketplace_paypal_process_ipn()
 */
function commerce_marketplace_paypal_wps_commerce_marketplace_paypal_ipn_orders_alter(&$orders, $ipn) {
  if (!empty($ipn['transaction']) && is_array($ipn['transaction'])) {
    $order_ids = array();
    foreach ($ipn['transaction'] as $transaction) {
      if (!empty($transaction['invoice'])) {
        if (strpos($transaction['invoice'], '-') !== FALSE) {
          // 'invoice' values should be in format '<code>-<order_id>-<REQUEST_TIME>'.
          // We get rid of timestamp using explode()...
          $invoice_order_ids = explode('-', $transaction['invoice'], -1);
          // ...and then remove the code from the beginning.
          array_shift($invoice_order_ids);
          // Here we should be left with an array of order IDs only.
          $order_ids = array_merge($order_ids, $invoice_order_ids);
        }
        else {
          $order_ids[] = $transaction['invoice'];
        }
      }
    }
    $orders = commerce_order_load_multiple($order_ids);
  }
}

/**
 * Implements hook_commerce_marketplace_paypal_ipn_save().
 *
 * Saves an IPN with some meta data related to local processing.
 *
 * @param $ipn
 *   An IPN array with additional parameters for the order_id and Commerce
 *   Payment transaction_id associated with the IPN.
 *
 * @return
 *   The operation performed by drupal_write_record() on save; since the IPN is
 *   received by reference, it will also contain the serial numeric ipn_id
 *   used locally.
 *
 * @see commerce_marketplace_paypal_process_ipn()
 * @see commerce_paypal_ipn_save()
 */
function commerce_marketplace_paypal_wps_commerce_marketplace_paypal_ipn_save($ipn) {
  // PayPal Adaptive Payments IPNs have a different format than standard WPS
  // IPNs, so we need to do a bit of moving stuff around.
  if (commerce_marketplace_paypal_wps_ipn_is_adaptive($ipn)) {
    // Adaptive Payment will be either parallel or chained. Parallel by default,
    // changed to chained if there is one primary receiver defined.
    $payment_type = 'parallel';

    if (!empty($ipn['transaction'])) {
      foreach ($ipn['transaction'] as $transaction) {
        $transaction['ipn_id'] = $ipn['ipn_id'];
        // PayPal sends back 'amount' value as something like 'EUR 14.99'.
        list($transaction['currency'], $transaction['amount']) = explode(' ', $transaction['amount']);

        drupal_write_record('commerce_marketplace_paypal_wps_adaptive_ipn', $transaction);

        if (!empty($transaction['is_primary_receiver']) && $transaction['is_primary_receiver'] == 'true') {
          $payment_type = 'chained';
        }
      }
    }

    // For Adaptive Payment the IPN structure and variable names are slightly
    // different than for normal WPS - but we still want to save them in the
    // same db table, so let's do a bit of rewriting.
    $ipn['txn_id'] = $ipn['pay_key'];
    $ipn['txn_type'] = $ipn['transaction_type'];
    $ipn['payer_email'] = $ipn['sender_email'];
    $ipn['payment_status'] = $ipn['status'];
    $ipn['payment_type'] = $payment_type;

    drupal_write_record('commerce_paypal_ipn', $ipn, 'ipn_id');
  }
  // This is not an Adaptive Payments IPN, but it still might apply to multiple
  // orders, and multiple payment transactions - and if that's the case then
  // we need to save their relationship in the database.
  else {
    foreach ($ipn['transaction_ids'] as $order_id => $transaction_id) {
      $record = array(
        'ipn_id' => $ipn['ipn_id'],
        'order_id' => $order_id,
        'transaction_id' => $transaction_id,
      );
      drupal_write_record('commerce_marketplace_paypal_ipn_transaction', $record);
    }

    // We already saved all the relationships between IPN and orders and payment
    // transactions above, so now we actually should remove both order_id and
    // transaction_id values from the main IPN table, as they could point to
    // only one of actual values from there.
    if (
      variable_get('commerce_store_payment_mode', COMMERCE_MARKETPLACE_PAYMENT_DEFAULT_MODE) == 'main_store'
      && !empty($ipn['transaction_ids'])
      && is_array($ipn['transaction_ids'])
      && count($ipn['transaction_ids']) > 1
    ) {
      $ipn['order_id'] = NULL;
      $ipn['transaction_id'] = NULL;
      drupal_write_record('commerce_paypal_ipn', $ipn, 'ipn_id');
    }
  }
}

/**
 * Implements hook_commerce_marketplace_paypal_ipn_load_alter().
 *
 * Loads the Adaptive Payments IPN.
 *
 * @see commerce_marketplace_paypal_ipn_load()
 */
function commerce_marketplace_paypal_wps_commerce_marketplace_paypal_ipn_load_alter(&$ipn, $txn_id, $order_id) {
  // If $ipn is not empty, it means that IPN was successfully loaded in
  // commerce_marketplace_paypal_ipn_load(), which means that it was not
  // Adaptive Payments IPN (even though its txn_id value could have been
  // found, the order_id couldn't, as for Adaptive IPNs their order_id
  // value is saved in commerce_marketplace_paypal_wps_adaptive_ipn table.
  if (!empty($ipn)) {
    return;
  }

  $sql = "
    SELECT
      i.*, ai.*,
      CASE WHEN ai.order_id IS NOT NULL THEN ai.order_id ELSE i.order_id END AS order_id,
      CASE WHEN ai.transaction_id IS NOT NULL THEN ai.transaction_id ELSE i.transaction_id END AS transaction_id
    FROM
      commerce_paypal_ipn i
    LEFT JOIN
      commerce_marketplace_paypal_wps_adaptive_ipn ai ON (i.ipn_id = ai.ipn_id)
    WHERE 1
      AND i.txn_id = :txn_id
      AND (i.order_id = :order_id OR ai.order_id = :order_id)
  ";

  $ipn = db_query($sql, array(
    ':txn_id' => $txn_id,
    ':order_id' => $order_id,
  ))->fetchObject();
}
